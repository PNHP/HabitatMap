#-------------------------------------------------------------------------------# Name:        Habitat Re-Map Pre-Processing Tools# Purpose:## Author:      MMoore## Created:     06/28/2021#-------------------------------------------------------------------------------# Import modulesimport arcpy, osfrom arcgis.features import FeatureLayerfrom arcpy.sa import *# Set tools to overwrite existing outputsarcpy.env.overwriteOutput = Truearcpy.env.workspace = "memory"######################################################################################################################################################## Begin toolbox######################################################################################################################################################class Toolbox(object):    def __init__(self):        """Define the toolbox (the name of the toolbox is the name of the .pyt file)."""        self.label = "HabitatMapProcessingTools"        self.alias = "Habitat Map Processing Tools"        self.canRunInBackground = False        self.tools = [preprocess]        ######################################################################################################################################################## Begin create NHA tool - this tool creates the core and supporting NHAs and fills their initial attributes######################################################################################################################################################class preprocess(object):    def __init__(self):        self.label = "Clip, Snap, and Project"        self.description = ""        self.canRunInBackground = False    def getParameterInfo(self):        rasters = arcpy.Parameter(            displayName = "Raster files to clip, snap, and project",            name = "rasters",            datatype = "GPRasterLayer",            parameterType = "Required",            direction = "Input",            multiValue = True)                reference_layers = arcpy.Parameter(            displayName = "GDB that contains snap, clip, and projection reference layers",            name = "reference_layers",            datatype = "DEWorkspace",            parameterType = "Required",            direction = "Input")                outputGDB = arcpy.Parameter(            displayName = "GDB for output processed layers",            name = "outputGDB",            datatype = "DEWorkspace",            parameterType = "Required",            direction = "Input")        params = [rasters,reference_layers,outputGDB]        return params    def isLicensed(self):        return True    def updateParameters(self, params):        return    def updateMessages(self, params):        return    def execute(self, params, messages):        rasters = params[0].valueAsText        rasters = rasters.split(";")        reference_layers = params[1].valueAsText        output_GDB = params[2].valueAsText                snap_raster = os.path.join(reference_layers,"snap_raster_10m")        clip_layer = os.path.join(reference_layers,"clip_layer")                # Set Snap Raster environment        arcpy.env.snapRaster = snap_raster                for raster in rasters:            clip = arcpy.management.Clip(raster,clip_layer,os.path.join("in_memory",os.path.basename(raster)+"_clipped"))            arcpy.management.ProjectRaster(clip,os.path.join(output_GDB+"_processed"),snap_raster)